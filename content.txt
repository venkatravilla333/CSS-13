1. What is CSS
   ===========

CSS stands for Cascading Style Sheet. It is a styling language, by using CSS we can style the html content or elements on webpage by using CSS properties. CSS properties will be in key value pair. 


2. How many ways we can add css to html elements
   =============================================


   1) Inline 

   - By using style attribute we can apply css directly to that html element. By using inline style we can apply css to only one element at a time.

   2) Internal

   - By using style tag in head tag we can apply css to many html elements in the same html file at a time.. 

   3) Extrenal

   - By using external style sheet we can apply css to many html elements in different html files at a time. We can link external css file to html file by using link tag in head tag.



3. CSS selectors
   =============
 
  - CSS selectors are used to select the HTML elements you want to style.

  - We can divide CSS selectors into several categories:

   1. Simple selectors (select elements based on tag, id, class) (3 selectors)

   2. Combinator selectors (select elements based on a specific relationship between them)

      a) Descendent selector => div p {} - all childs
      b) Child selector      => div>p {} - direct childs    
      c) Adjacent sibling    => div+p {} - next one (sibling)
      d) General sibling     => div~p {} - next all siblings

   3. Pseudo-class selectors (select elements based on a certain state)

   4. Pseudo-elements selectors (select and style a part of an element)

   5. Attribute selectors (select elements based on an attribute or attribute value) (4 selectors)

   6. Universal Selector (The universal selector (*) selects all HTML elements on the page)

   7. Grouping Selector (To group selectors, separate each selector with a comma)

      Allows you to apply the same styles to multiple selectors.

      Example: h1, h2, h3 { font-family: Arial, sans-serif; }


1.Type (Element) Selector:
  -----------------------

Selects elements by their HTML tag name.

Example: p { color: blue; }

2.Class Selector:
  --------------

Selects elements by their class attribute.

Example: .my-class { font-weight: bold; }

3.ID Selector:
  -----------

Selects a single element by its unique ID attribute.

Example: #my-id { background-color: yellow; }

4.Universal Selector:
  ------------------

Selects all elements on the page.

Example: * { margin: 0; }

5.Descendant Selector (all childs):
  -------------------

Selects an element that is a descendant of another element.

Example: ul li { list-style: square; }

6.Child Selector (direct child):
  --------------

Selects an element that is a direct child of another element.

Example: ul > li { font-style: italic; }

7.Adjacent Sibling Selector (next sibling):
  -------------------------

Selects an element that is immediate sibling of element.

Example: h2 + p { color: red; }

8.General Sibling Selector (next all siblings):
  ------------------------

Selects elements that are siblings of element.

Example: h2 ~ p { font-size: 18px; }


9.Pseudo-Class Selector:
   ---------------------

Selects elements based on a specific state or interaction, such as :hover, :active, and :focus.

Example: a:hover { text-decoration: underline; }

10.Pseudo-Element Selector:
   -----------------------

Selects and styles a part of an element's content, such as  

=> ::first-letter ::first-line and ::before and ::after

Example: p::before { content: "Note: "; }

Pseudo-elements in CSS are used to style a specific part of an element. They are denoted by double colons (::) and are often used with the ::before and ::after pseudo-elements to insert content before or after an element. Here's an example of using the ::before pseudo-element to add content before an element:

.myclass::before {
  content: "This is content";
  font-weight: bold;
  color: red;
}

.myclass::after {
  content: "This is content";
  font-weight: bold;
  color: white;
}


11.Grouping Selector:
   -----------------

Allows you to apply the same styles to multiple selectors.

Example: h1, h2, h3 { font-family: Arial, sans-serif; }


12.Attribute Selector:
  ------------------

Selects elements based on the value of their attributes.

Example: input[type="text"] { border: 1px solid #ccc; }


13.Attribute Value Starts With Selector:
   ------------------------------------

Selects elements whose attribute values start with a specified string.

Example: [href^="https://"] { color: blue; }

14.Attribute Value Ends With Selector:
   ----------------------------------

Selects elements whose attribute values end with a specified string.

Example: [src$=".jpg"] { border: 1px solid #ccc; }

15.Attribute Value Contains Selector:
   ---------------------------------

Selects elements whose attribute values contain a specified string.

Example: [alt*="cat"] { border: 2px solid orange; }


4. CSS Specifcity
   ==============

When we apply more than one set of CSS rules to the same element, the browser will have to decide which specific set of css will be applied to the element. The rules the browser follows are collectively called Specificity.

   Note:
   ---- 
   - When two or more selectors have equal specificity, the last(latest) one counts.
   - Universal selectors have least specificity.


   1- !important rule (overrides all other specificity)

   2- Inline styles (highest specificity)

   3- IDs (#my-id)

   4- Combinator selectors

   5- Classes and pseudo-classes and attribute selector (.my-class, :hover)

   6- Element selectors and group selectors(h1, p)

   7- Universal selectors (*)
  
   8- Default browser styles 

  
***pseudo class and pseudo element selectors are overide by id and inline and !important***


When comparing the specificity of universal selectors and group selectors, group selectors can have a higher specificity if they include selectors with higher specificity values (e.g., IDs or classes). Universal selectors have low specificity by default.


5. Text Properties 
   ===============

CSS (Cascading Style Sheets) provides a wide range of text properties that allows you to control the appearance and layout of text within HTML elements. A list of common text properties in CSS.


1.color:
  -----
 
Sets the color of the text.
Example: color: red;

2.direction:
  ---------

Sets the text direction, such as ltr (left-to-right) or rtl (right-to-left).
Example: direction: rtl;

3.text-transform:
  --------------

Modifies the case of text, e.g., uppercase or lowercase or capitalize.
Example: text-transform: uppercase;

4.text-shadow:
  -----------

It gives shadow to text.
 
text-shadow: x-axis y-axis blur color
text-shadow: 10px 0px 10px red

5.text-align:
  ----------

Aligns the text horizontally within its container.
Example: text-align: center;

6.text-decoration:
  ---------------

Controls decorations like underline, overline, and line-through.
Example: text-decoration: underline;

7.text-indent:
   -----------

Sets the indentation of the first line of text within an element.
Example: text-indent: 20px;


8.font-family:
  -----------

Specifies the font family for the text.
Example: font-family: Arial, sans-serif;

9.font-size:
   ---------

Sets the size of the text.
Example: font-size: 16px;

10.font-weight:
   -----------

Defines the thickness or boldness of the text.
Example: font-weight: bold;

11.font-style:
   ----------

Specifies the style of the text, such as italic.
Example: font-style: italic;


12.line-height:
   -----------

Sets the height of a line of text, controlling spacing between lines.
Example: line-height: 1.5;


13.letter-spacing:
  --------------

Adjusts the space between individual characters.
Example: letter-spacing: 2px;

14.word-spacing:
  ------------

Controls the spacing between words in a block of text.
Example: word-spacing: 4px;

These are some of the essential text properties in CSS. By using these properties, you can customize the appearance and layout of text on your web pages, making it an integral part of web design and typography.

16. CSS Animations
    ==============

Animation is a process of changing elements style in a given duration.

we can apply multiple css styles to an element during given duration by using @keyframe.


syntax
------

@keyframe animation-name{

keyFrame-selector{

}

- keyFrame-selectors
  ------------------

  "from" and "to" and we can give % also.
 
- You should configure the animation name and animation duration on an element.

properties on an element
------------------------
1)animation-name: (compulsory)
2)animation-duration:(compulsory) (total animation time)
3)animation-delay: starts animation after some delay of time. (animation starts time)
4)animation-iteration-count: how many times animation need. 

5)animation-direction: normal|reverse|alternate|alternate-reverse
6)animation-fill-mode: backwards|forwards|none (before & after animation styles)
7)animation-play-state: paused | running
8)animation-timing-function: linear|ease-in|ease-out|ease-in-out (speed of animation)

=> ease:   Default value. The animation has a slow start, then fast, before it ends slowly.
=> linear: Play an animation with the same speed from beginning to end.
=> ease-in: The animation has a slow start.
=> ease-out: The animation has a slow end.
=> ease-in-out: The animation has both a slow start and a slow end.




CSS Transform property
======================

Transition-property: transform
transition-duration:5s
transition-delay: 2s
transition-timing-function:

Using the Transform property we can rotate, skew, scale, or move an element.

transform:
---------
         translate: It will move our element in x axis and y axis.
         scale : It will re-size our element size in x and y axis.
         rotate : It will rotate our element in x axis and y axis.
         skew : It will skew an element in x axis and y axis.


The transform property accepts a variety of transformation functions, which include:

Translate (move):

translateX(): Moves the element horizontally.
translateY(): Moves the element vertically.
translate(): Moves the element both horizontally and vertically.

Scale (resize):

scaleX(): Scales the element horizontally.
scaleY(): Scales the element vertically.
scale(): Scales the element in both dimensions.

Rotate:

rotate(): Rotates the element by a specified angle in degrees.

Skew:

skewX(): Skews the element along the X-axis.
skewY(): Skews the element along the Y-axis.
skew(): Skews the element along both axes.


ex
--
/* Translate an element 50 pixels to the right and 20 pixels down */

.transformed-element {
  transform: translate(50px, 20px);
}

/* Scale an element to be twice its original size */

.scaled-element {
  transform: scale(2);
}

/* Rotate an element by 45 degrees */

.rotated-element {
  transform: rotate(45deg);
}

/* Skew an element along the X-axis */

.skewed-element {
  transform: skewX(30deg);
}


17. CSS units
    =========

CSS uses various units of measurement to define the size, position, and spacing and border of 
elements on a web page. These units allow web developers to create responsive.

Here are some common CSS units:

1)Absolute Units
  --------------

  These are the units whose length will not be changed across any device.
  These will not be depended on any element/property.

  ex: px


These units are absolute and not recommended for web design because they do not scale well with different devices and screen sizes.

Pixels (px):
-----------

Pixels are the most common unit and represent the smallest unit of measurement on a screen.
They are fixed units, meaning they do not change depend upon anything.

element {
  width: 100px;
  font-size: 16px;
}


element {
  width: 2in; /* 2 inches */
  margin: 1cm; /* 1 centimeter */
}


Choose the CSS unit that best suits your design and layout needs, keeping in mind that relative units (like em, rem, and percentages) are often preferred for responsive web design.



2)Relative Units
  --------------

  These will be depended on any element/property.
  These are the units whose length will be changed across devices.

  ex: %, vw, vh, em, rem (use if you want to develop responsive website).


px => Not related to anything.

% => Related to parent element. 

vw/vh => Related to screen size.

rem => Related to root element font size (html).

em => Related to its own font size. (font-size : raleted to parent element font-size)


Percentage (%):
--------------

Percentages are relative units that refer to a percentage of the parent element's property (e.g., width, height). It depends upon parent length.

Commonly used for creating responsive layouts.

element {
  width: 50%; /* 50% of the parent element's width */
  padding: 10% 5%; /* 10% top and bottom, 5% left and right */
}


Viewport-Percentage Units (vw, vh):
----------------------------------

vw: Visible width area on the screen.

vh: Visible height area on the screen.

=> vh and vw depends upon screen size.

These units are relative to the viewport size (the visible area of the browser window).

Useful for creating responsive designs that adapt to the screen size.

element {
  width: 50vw; /* 50% of the viewport width */
  height: 25vh; /* 25% of the viewport height */
}



Em (em):
-------

The em unit is relative to the font size of the nearest parent element with a defined font size.

It is useful for creating scalable and responsive designs.

element {
  font-size: 1.5em; /* 1.5 times the font size of the parent element */
  margin: 0.5em; /* Half the font size of the current element */
}

-font-size depends upon parent element font-size.
-other than font-size properties depends on fontsize of current element.

Rem (rem):
---------

Similar to em, but it is relative to the font size of the root element (usually the <html> element).

Useful for maintaining a consistent sizing scale across the entire page.

element {
  font-size: 1.5rem; /* 1.5 times the root font size */
  margin: 1rem; /* Equal to the root font size */
}


